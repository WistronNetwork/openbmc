From 8fedac7dbc79cea469ccfd742be51dcc9b90301c Mon Sep 17 00:00:00 2001
From: Neal_Chen <neal_chen@wistron.com>
Date: Tue, 6 Jun 2023 11:09:13 +0800
Subject: [PATCH 3/6] Delete unused files which is related files for sonic

Signed-off-by: Neal_Chen <neal_chen@wistron.com>
---
 sonic_platform_base/component_base.py  | 150 --------
 sonic_platform_base/fan_base.py        | 102 -----
 sonic_platform_base/fan_drawer_base.py |  94 -----
 sonic_platform_base/module_base.py     | 498 -------------------------
 sonic_platform_base/psu_base.py        | 286 --------------
 sonic_platform_base/thermal_base.py    | 139 -------
 sonic_platform_base/watchdog_base.py   |  56 ---
 7 files changed, 1325 deletions(-)
 delete mode 100644 sonic_platform_base/component_base.py
 delete mode 100644 sonic_platform_base/fan_base.py
 delete mode 100644 sonic_platform_base/fan_drawer_base.py
 delete mode 100644 sonic_platform_base/module_base.py
 delete mode 100644 sonic_platform_base/psu_base.py
 delete mode 100644 sonic_platform_base/thermal_base.py
 delete mode 100644 sonic_platform_base/watchdog_base.py

diff --git a/sonic_platform_base/component_base.py b/sonic_platform_base/component_base.py
deleted file mode 100644
index 8f3887f..0000000
--- a/sonic_platform_base/component_base.py
+++ /dev/null
@@ -1,150 +0,0 @@
-"""
-    component_base.py
-
-    Abstract base class for implementing a platform-specific class
-    to interact with a chassis/module component (e.g., BIOS, CPLD, FPGA, etc.) in SONiC
-"""
-
-# Return codes for firmware updates
-
-FW_AUTO_INSTALLED = 1
-FW_AUTO_UPDATED = 2
-FW_AUTO_SCHEDULED = 3
-FW_AUTO_ERR_BOOT_TYPE = -1
-FW_AUTO_ERR_IMAGE = -2
-FW_AUTO_ERR_UNKNOWN = -3
-
-
-class ComponentBase(object):
-    """
-    Abstract base class for implementing a platform-specific class
-    to interact with a chassis/module component (e.g., BIOS, CPLD, FPGA, etc.)
-    """
-
-    def get_name(self):
-        """
-        Retrieves the name of the component
-
-        Returns:
-            A string containing the name of the component
-        """
-        raise NotImplementedError
-
-    def get_description(self):
-        """
-        Retrieves the description of the component
-
-        Returns:
-            A string containing the description of the component
-        """
-        raise NotImplementedError
-
-    def get_firmware_version(self):
-        """
-        Retrieves the firmware version of the component
-
-        Note: the firmware version will be read from HW
-
-        Returns:
-            A string containing the firmware version of the component
-        """
-        raise NotImplementedError
-
-    def get_available_firmware_version(self, image_path):
-        """
-        Retrieves the available firmware version of the component
-
-        Note: the firmware version will be read from image
-
-        Args:
-            image_path: A string, path to firmware image
-
-        Returns:
-            A string containing the available firmware version of the component
-        """
-        raise NotImplementedError
-
-    def get_firmware_update_notification(self, image_path):
-        """
-        Retrieves a notification on what should be done in order to complete
-        the component firmware update
-
-        Args:
-            image_path: A string, path to firmware image
-
-        Returns:
-            A string containing the component firmware update notification if required.
-            By default 'None' value will be used, which indicates that no actions are required
-        """
-        return None
-
-    def install_firmware(self, image_path):
-        """
-        Installs firmware to the component
-
-        This API performs firmware installation only: this may/may not be the same as firmware update.
-        In case platform component requires some extra steps (apart from calling Low Level Utility)
-        to load the installed firmware (e.g, reboot, power cycle, etc.) - this must be done manually by user
-
-        Note: in case immediate actions are required to complete the component firmware update
-        (e.g., reboot, power cycle, etc.) - will be done automatically by API and no return value provided
-
-        Args:
-            image_path: A string, path to firmware image
-
-        Returns:
-            A boolean, True if install was successful, False if not
-        """
-        raise NotImplementedError
-
-    def update_firmware(self, image_path):
-        """
-        Updates firmware of the component
-
-        This API performs firmware update: it assumes firmware installation and loading in a single call.
-        In case platform component requires some extra steps (apart from calling Low Level Utility)
-        to load the installed firmware (e.g, reboot, power cycle, etc.) - this will be done automatically by API
-
-        Args:
-            image_path: A string, path to firmware image
-
-        Returns:
-            Boolean False if image_path doesn't exist instead of throwing an exception error
-            Nothing when the update is successful
-
-        Raises:
-            RuntimeError: update failed
-        """
-        raise NotImplementedError
-
-    def auto_update_firmware(self, image_path, boot_type):
-        """
-        Updates firmware of the component
-
-        This API performs firmware update automatically based on boot_type: it assumes firmware installation
-        and/or creating a loading task during the reboot, if needed, in a single call.
-        In case platform component requires some extra steps (apart from calling Low Level Utility)
-        to load the installed firmware (e.g, reboot, power cycle, etc.) - this will be done automatically during the reboot.
-        The loading task will be created by API.
-
-        Args:
-            image_path: A string, path to firmware image
-            boot_type: A string, reboot type following the upgrade
-                         - none/fast/warm/cold
-
-        Returns:
-            Output: A return code
-                return_code: An integer number, status of component firmware auto-update
-                    - return code of a positive number indicates successful auto-update
-                        - status_installed = 1
-                        - status_updated = 2
-                        - status_scheduled = 3
-                    - return_code of a negative number indicates failed auto-update
-                        - status_err_boot_type = -1
-                        - status_err_image = -2
-                        - status_err_unknown = -3
-
-        Raises:
-            RuntimeError: auto-update failure cause
-        """
-        raise NotImplementedError
diff --git a/sonic_platform_base/fan_base.py b/sonic_platform_base/fan_base.py
deleted file mode 100644
index 2b12591..0000000
--- a/sonic_platform_base/fan_base.py
+++ /dev/null
@@ -1,102 +0,0 @@
-"""
-    fan_base.py
-
-    Abstract base class for implementing a platform-specific class with which
-    to interact with a fan module in SONiC
-"""
-
-from . import device_base
-
-
-class FanBase(device_base.DeviceBase):
-    """
-    Abstract base class for interfacing with a fan module
-    """
-    # Device type definition. Note, this is a constant.
-    DEVICE_TYPE = "fan"
-
-    # Possible fan directions (relative to port-side of device)
-    FAN_DIRECTION_INTAKE = "intake"
-    FAN_DIRECTION_EXHAUST = "exhaust"
-    FAN_DIRECTION_NOT_APPLICABLE = "N/A"
-
-    # Possible fan status LED colors
-    STATUS_LED_COLOR_GREEN = "green"
-    STATUS_LED_COLOR_AMBER = "amber"
-    STATUS_LED_COLOR_RED = "red"
-    STATUS_LED_COLOR_OFF = "off"
-
-    def get_direction(self):
-        """
-        Retrieves the direction of fan
-
-        Returns:
-            A string, either FAN_DIRECTION_INTAKE or FAN_DIRECTION_EXHAUST
-            depending on fan direction
-        """
-        raise NotImplementedError
-
-    def get_speed(self):
-        """
-        Retrieves the speed of fan as a percentage of full speed
-
-        Returns:
-            An integer, the percentage of full fan speed, in the range 0 (off)
-                 to 100 (full speed)
-        """
-        raise NotImplementedError
-
-    def get_target_speed(self):
-        """
-        Retrieves the target (expected) speed of the fan
-
-        Returns:
-            An integer, the percentage of full fan speed, in the range 0 (off)
-                 to 100 (full speed)
-        """
-        raise NotImplementedError
-
-    def get_speed_tolerance(self):
-        """
-        Retrieves the speed tolerance of the fan
-
-        Returns:
-            An integer, the percentage of variance from target speed which is
-                 considered tolerable
-        """
-        raise NotImplementedError
-
-    def set_speed(self, speed):
-        """
-        Sets the fan speed
-
-        Args:
-            speed: An integer, the percentage of full fan speed to set fan to,
-                   in the range 0 (off) to 100 (full speed)
-
-        Returns:
-            A boolean, True if speed is set successfully, False if not
-        """
-        raise NotImplementedError
-
-    def set_status_led(self, color):
-        """
-        Sets the state of the fan module status LED
-
-        Args:
-            color: A string representing the color with which to set the
-                   fan module status LED
-
-        Returns:
-            bool: True if status LED state is set successfully, False if not
-        """
-        raise NotImplementedError
-
-    def get_status_led(self):
-        """
-        Gets the state of the fan status LED
-
-        Returns:
-            A string, one of the predefined STATUS_LED_COLOR_* strings above
-        """
-        raise NotImplementedError
diff --git a/sonic_platform_base/fan_drawer_base.py b/sonic_platform_base/fan_drawer_base.py
deleted file mode 100644
index 0f56c85..0000000
--- a/sonic_platform_base/fan_drawer_base.py
+++ /dev/null
@@ -1,94 +0,0 @@
-"""
-    fan_drawer_base.py
-
-    Abstract base class for implementing a platform-specific class with which
-    to interact with a fan drawer module in SONiC
-"""
-
-import sys
-from . import device_base
-
-
-class FanDrawerBase(device_base.DeviceBase):
-    """
-    Abstract base class for interfacing with a fan drawer
-    """
-    # Device type definition. Note, this is a constant.
-    DEVICE_TYPE = "fan_drawer"
-
-    def __init__(self):
-        self._fan_list = []
-
-    def get_num_fans(self):
-        """
-        Retrieves the number of fans available on this fan drawer
-
-        Returns:
-            An integer, the number of fan modules available on this fan drawer
-        """
-        return len(self._fan_list)
-
-    def get_all_fans(self):
-        """
-        Retrieves all fan modules available on this fan drawer
-
-        Returns:
-            A list of objects derived from FanBase representing all fan
-            modules available on this fan drawer
-        """
-        return self._fan_list
-
-    def get_fan(self, index):
-        """
-        Retrieves fan module represented by (0-based) index <index>
-
-        Args:
-            index: An integer, the index (0-based) of the fan module to
-            retrieve
-
-        Returns:
-            An object dervied from FanBase representing the specified fan
-            module
-        """
-        fan = None
-
-        try:
-            fan = self._fan_list[index]
-        except IndexError:
-            sys.stderr.write("Fan index {} out of range (0-{})\n".format(
-                             index, len(self._fan_list)-1))
-
-        return fan
-
-
-    def set_status_led(self, color):
-        """
-        Sets the state of the fan drawer status LED
-
-        Args:
-            color: A string representing the color with which to set the
-                   fan drawer status LED
-
-        Returns:
-            bool: True if status LED state is set successfully, False if not
-        """
-        raise NotImplementedError
-
-    def get_status_led(self):
-        """
-        Gets the state of the fan drawer LED
-
-        Returns:
-            A string, one of the predefined STATUS_LED_COLOR_* strings above
-        """
-        raise NotImplementedError
-
-    def get_maximum_consumed_power(self):
-        """
-        Retrives the maximum power drawn by Fan Drawer
-
-        Returns:
-            A float, with value of the maximum consumable power of the
-            component.
-        """
-        raise NotImplementedError
diff --git a/sonic_platform_base/module_base.py b/sonic_platform_base/module_base.py
deleted file mode 100644
index 3e96f8b..0000000
--- a/sonic_platform_base/module_base.py
+++ /dev/null
@@ -1,498 +0,0 @@
-"""
-    module_base.py
-
-    Base class for implementing a platform-specific class with which
-    to interact with a module (as used in a modular chassis) SONiC.
-"""
-
-import sys
-from . import device_base
-
-
-class ModuleBase(device_base.DeviceBase):
-    """
-    Base class for interfacing with a module (supervisor module, line card
-    module, etc. (applicable for a modular chassis)
-    """
-    # Device type definition. Note, this is a constant.
-    DEVICE_TYPE = "module"
-
-    # Possible card types for modular chassis
-    MODULE_TYPE_SUPERVISOR = "SUPERVISOR"
-    MODULE_TYPE_LINE    = "LINE-CARD"
-    MODULE_TYPE_FABRIC  = "FABRIC-CARD"
-
-    # Possible card status for modular chassis
-    # Module state is Empty if no module is inserted in the slot
-    MODULE_STATUS_EMPTY   = "Empty"
-    # Module state if Offline. This is also the admin-down state.
-    MODULE_STATUS_OFFLINE = "Offline"
-    # Module state if power down was triggered. Example, this could be a
-    # policy action from sensors reaching a critical state triggering the
-    # module to be powered-down.
-    MODULE_STATUS_POWERED_DOWN = "PoweredDown"
-    # Module state is Present when it is powered up, but not fully functional.
-    MODULE_STATUS_PRESENT = "Present"
-    # Module state is Present when it is powered up, but entered a fault state.
-    # Module is not able to go Online.
-    MODULE_STATUS_FAULT   = "Fault"
-    # Module state is Online when fully operational
-    MODULE_STATUS_ONLINE  = "Online"
-
-    # Invalid slot for modular chassis
-    MODULE_INVALID_SLOT = -1
-
-    # Possible reboot types for modular chassis
-    # Module reboot type to reboot entire card
-    MODULE_REBOOT_DEFAULT = "Default"
-    # Module reboot type to reboot CPU complex
-    MODULE_REBOOT_CPU_COMPLEX = "CPU"
-    # Module reboot type to reboot FPGA complex
-    MODULE_REBOOT_FPGA_COMPLEX = "FPGA"
-
-    def __init__(self):
-        # List of ComponentBase-derived objects representing all components
-        # available on the module
-        self._component_list = []
-
-        # List of FanBase-derived objects representing all fans
-        # available on the module
-        self._fan_list = []
-
-        # List of PsuBase-derived objects representing all power supply units
-        # available on the module
-        self._psu_list = []
-
-        # List of ThermalBase-derived objects representing all thermals
-        # available on the module
-        self._thermal_list = []
-
-        # List of SfpBase-derived objects representing all sfps
-        # available on the module
-        self._sfp_list = []
-
-        # List of ASIC-derived objects representing all ASICs
-        # visibile in PCI domain on the module
-        self._asic_list = []
-
-    def get_base_mac(self):
-        """
-        Retrieves the base MAC address for the module
-
-        Returns:
-            A string containing the MAC address in the format
-            'XX:XX:XX:XX:XX:XX'
-        """
-        raise NotImplementedError
-
-    def get_system_eeprom_info(self):
-        """
-        Retrieves the full content of system EEPROM information for the module
-
-        Returns:
-            A dictionary where keys are the type code defined in
-            OCP ONIE TlvInfo EEPROM format and values are their corresponding
-            values.
-            Ex. { '0x21': 'AG9064', '0x22': 'V1.0', '0x23': 'AG9064-0109867821',
-                  '0x24': '001c0f000fcd0a', '0x25': '02/03/2018 16:22:00',
-                  '0x26': '01', '0x27': 'REV01', '0x28': 'AG9064-C2358-16G'}
-        """
-        raise NotImplementedError
-
-    def get_name(self):
-        """
-        Retrieves the name of the module prefixed by SUPERVISOR, LINE-CARD,
-        FABRIC-CARD
-
-        Returns:
-            A string, the module name prefixed by one of MODULE_TYPE_SUPERVISOR,
-            MODULE_TYPE_LINE or MODULE_TYPE_FABRIC and followed by a 0-based index
-
-            Ex. A Chassis having 1 supervisor, 4 line-cards and 6 fabric-cards
-            can provide names SUPERVISOR0, LINE-CARD0 to LINE-CARD3,
-            FABRIC-CARD0 to FABRIC-CARD5
-        """
-        raise NotImplementedError
-
-    def get_description(self):
-        """
-        Retrieves the platform vendor's product description of the module
-
-        Returns:
-            A string, providing the vendor's product description of the module.
-        """
-        raise NotImplementedError
-
-    def get_slot(self):
-        """
-        Retrieves the platform vendor's slot number of the module
-
-        Returns:
-            An integer, indicating the slot number in the chassis
-        """
-        raise NotImplementedError
-
-    def get_type(self):
-        """
-        Retrieves the type of the module.
-
-        Returns:
-            A string, the module-type from one of the predefined types:
-            MODULE_TYPE_SUPERVISOR, MODULE_TYPE_LINE or MODULE_TYPE_FABRIC
-        """
-        raise NotImplementedError
-
-    def get_oper_status(self):
-        """
-        Retrieves the operational status of the module
-
-        Returns:
-            A string, the operational status of the module from one of the
-            predefined status values: MODULE_STATUS_EMPTY, MODULE_STATUS_OFFLINE,
-            MODULE_STATUS_FAULT, MODULE_STATUS_PRESENT or MODULE_STATUS_ONLINE
-        """
-        raise NotImplementedError
-
-    def reboot(self, reboot_type):
-        """
-        Request to reboot the module
-
-        Args:
-            reboot_type: A string, the type of reboot requested from one of the
-            predefined reboot types: MODULE_REBOOT_DEFAULT, MODULE_REBOOT_CPU_COMPLEX,
-            or MODULE_REBOOT_FPGA_COMPLEX
-
-        Returns:
-            bool: True if the request has been issued successfully, False if not
-        """
-        raise NotImplementedError
-
-    def set_admin_state(self, up):
-        """
-        Request to keep the card in administratively up/down state.
-        The down state will power down the module and the status should show
-        MODULE_STATUS_OFFLINE.
-        The up state will take the module to MODULE_STATUS_FAULT or
-        MODULE_STAUS_ONLINE states.
-
-        Args:
-            up: A boolean, True to set the admin-state to UP. False to set the
-            admin-state to DOWN.
-
-        Returns:
-            bool: True if the request has been issued successfully, False if not
-        """
-        raise NotImplementedError
-
-    def get_maximum_consumed_power(self):
-        """
-        Retrives the maximum power drawn by this module
-
-        Returns:
-            A float, with value of the maximum consumable power of the
-            module.
-        """
-        raise NotImplementedError
-
-    ##############################################
-    # Component methods
-    ##############################################
-
-    def get_num_components(self):
-        """
-        Retrieves the number of components available on this module
-
-        Returns:
-            An integer, the number of components available on this module
-        """
-        return len(self._component_list)
-
-    def get_all_components(self):
-        """
-        Retrieves all components available on this module
-
-        Returns:
-            A list of objects derived from ComponentBase representing all components
-            available on this module
-        """
-        return self._component_list
-
-    def get_component(self, index):
-        """
-        Retrieves component represented by (0-based) index <index>
-
-        Args:
-            index: An integer, the index (0-based) of the component to retrieve
-
-        Returns:
-            An object dervied from ComponentBase representing the specified component
-        """
-        component = None
-
-        try:
-            component = self._component_list[index]
-        except IndexError:
-            sys.stderr.write("Component index {} out of range (0-{})\n".format(
-                             index, len(self._component_list)-1))
-
-        return component
-
-    ##############################################
-    # Fan module methods
-    ##############################################
-
-    def get_num_fans(self):
-        """
-        Retrieves the number of fan modules available on this module
-
-        Returns:
-            An integer, the number of fan modules available on this module
-        """
-        return len(self._fan_list)
-
-    def get_all_fans(self):
-        """
-        Retrieves all fan modules available on this module
-
-        Returns:
-            A list of objects derived from FanBase representing all fan
-            modules available on this module
-        """
-        return self._fan_list
-
-    def get_fan(self, index):
-        """
-        Retrieves fan module represented by (0-based) index <index>
-
-        Args:
-            index: An integer, the index (0-based) of the fan module to
-            retrieve
-
-        Returns:
-            An object dervied from FanBase representing the specified fan
-            module
-        """
-        fan = None
-
-        try:
-            fan = self._fan_list[index]
-        except IndexError:
-            sys.stderr.write("Fan index {} out of range (0-{})\n".format(
-                             index, len(self._fan_list)-1))
-
-        return fan
-
-    ##############################################
-    # PSU module methods
-    ##############################################
-
-    def get_num_psus(self):
-        """
-        Retrieves the number of power supply units available on this module
-
-        Returns:
-            An integer, the number of power supply units available on this
-            module
-        """
-        return len(self._psu_list)
-
-    def get_all_psus(self):
-        """
-        Retrieves all power supply units available on this module
-
-        Returns:
-            A list of objects derived from PsuBase representing all power
-            supply units available on this module
-        """
-        return self._psu_list
-
-    def get_psu(self, index):
-        """
-        Retrieves power supply unit represented by (0-based) index <index>
-
-        Args:
-            index: An integer, the index (0-based) of the power supply unit to
-            retrieve
-
-        Returns:
-            An object dervied from PsuBase representing the specified power
-            supply unit
-        """
-        psu = None
-
-        try:
-            psu = self._psu_list[index]
-        except IndexError:
-            sys.stderr.write("PSU index {} out of range (0-{})\n".format(
-                             index, len(self._psu_list)-1))
-
-        return psu
-
-    ##############################################
-    # THERMAL methods
-    ##############################################
-
-    def get_num_thermals(self):
-        """
-        Retrieves the number of thermals available on this module
-
-        Returns:
-            An integer, the number of thermals available on this module
-        """
-        return len(self._thermal_list)
-
-    def get_all_thermals(self):
-        """
-        Retrieves all thermals available on this module
-
-        Returns:
-            A list of objects derived from ThermalBase representing all thermals
-            available on this module
-        """
-        return self._thermal_list
-
-    def get_thermal(self, index):
-        """
-        Retrieves thermal unit represented by (0-based) index <index>
-
-        Args:
-            index: An integer, the index (0-based) of the thermal to
-            retrieve
-
-        Returns:
-            An object dervied from ThermalBase representing the specified thermal
-        """
-        thermal = None
-
-        try:
-            thermal = self._thermal_list[index]
-        except IndexError:
-            sys.stderr.write("THERMAL index {} out of range (0-{})\n".format(
-                             index, len(self._thermal_list)-1))
-
-        return thermal
-
-    ##############################################
-    # SFP methods
-    ##############################################
-
-    def get_num_sfps(self):
-        """
-        Retrieves the number of sfps available on this module
-
-        Returns:
-            An integer, the number of sfps available on this module
-        """
-        return len(self._sfp_list)
-
-    def get_all_sfps(self):
-        """
-        Retrieves all sfps available on this module
-
-        Returns:
-            A list of objects derived from PsuBase representing all sfps
-            available on this module
-        """
-        return self._sfp_list
-
-    def get_sfp(self, index):
-        """
-        Retrieves sfp represented by (0-based) index <index>
-
-        Args:
-            index: An integer, the index (0-based) of the sfp to retrieve
-
-        Returns:
-            An object dervied from SfpBase representing the specified sfp
-        """
-        sfp = None
-
-        try:
-            sfp = self._sfp_list[index]
-        except IndexError:
-            sys.stderr.write("SFP index {} out of range (0-{})\n".format(
-                             index, len(self._sfp_list)-1))
-
-        return sfp
-
-    def get_change_event(self, timeout=0):
-        """
-        Returns a nested dictionary containing all devices which have
-        experienced a change in this module
-
-        Args:
-            timeout: Timeout in milliseconds (optional). If timeout == 0,
-                this method will block until a change is detected.
-
-        Returns:
-            (bool, dict):
-                - True if call successful, False if not;
-                - A nested dictionary where key is a device type,
-                  value is a dictionary with key:value pairs in the format of
-                  {'device_id':'device_event'},
-                  where device_id is the device ID for this device and
-                        device_event,
-                             status='1' represents device inserted,
-                             status='0' represents device removed.
-                  Ex. {'fan':{'0':'0', '2':'1'}, 'sfp':{'11':'0'}}
-                      indicates that fan 0 has been removed, fan 2
-                      has been inserted and sfp 11 has been removed.
-        """
-        raise NotImplementedError
-
-    ##############################################
-    # Midplane methods for modular chassis
-    ##############################################
-    def get_midplane_ip(self):
-        """
-        Retrieves the midplane IP-address of the module in a modular chassis
-        When called from the Supervisor, the module could represent the
-        line-card and return the midplane IP-address of the line-card.
-        When called from the line-card, the module will represent the
-        Supervisor and return its midplane IP-address.
-
-        Returns:
-            A string, the IP-address of the module reachable over the midplane
-
-        """
-        raise NotImplementedError
-
-    def is_midplane_reachable(self):
-        """
-        Retrieves the reachability status of the module from the Supervisor or
-        of the Supervisor from the module via the midplane of the modular chassis
-
-        Returns:
-            A bool value, should return True if module is reachable via midplane
-        """
-        return NotImplementedError
-
-    ##############################################
-    # ASIC methods
-    ##############################################
-    def get_all_asics(self):
-        """
-        Retrieves the list of all ASICs on the module that are visible in PCI domain.
-        When called from the Supervisor of modular system, the module could be
-        fabric card, and the function returns all fabric ASICs on this module that
-        appear in PCI domain of the Supervisor.
-
-        Returns:
-            A list of ASICs. Index of an ASIC in the list is the index of the ASIC
-            on the module. Index is 0 based.
-
-            An item in the list is a tuple that includes:
-               - ASIC instance number (indexed globally across all modules of
-                 the chassis). This number is used to find settings for the ASIC
-                 from /usr/share/sonic/device/platform/hwsku/asic_instance_number/.
-               - ASIC PCI address: It is used by syncd to attach the correct ASIC.
-
-            For example: [('4', '0000:05:00.0'), ('5', '0000:07:00.0')]
-               In this example, from the output, we know the module has 2 ASICs.
-               Item ('4', '0000:05:00.0') describes information about the first ASIC
-               in the module.
-               '4' means it is asic4 in the chassis. Settings for this ASIC is at
-               /usr/share/sonic/device/platform/hwsku/4/.
-               And '0000:05:00.0' is its PCI address.
-        """
-        return self._asic_list
diff --git a/sonic_platform_base/psu_base.py b/sonic_platform_base/psu_base.py
deleted file mode 100644
index 95ec516..0000000
--- a/sonic_platform_base/psu_base.py
+++ /dev/null
@@ -1,286 +0,0 @@
-"""
-    psu_base.py
-
-    Abstract base class for implementing a platform-specific class with which
-    to interact with a power supply unit (PSU) in SONiC
-"""
-
-import sys
-from . import device_base
-
-
-class PsuBase(device_base.DeviceBase):
-    """
-    Abstract base class for interfacing with a power supply unit
-    """
-    # Device type definition. Note, this is a constant.
-    DEVICE_TYPE = "psu"
-
-    # Status of Master LED
-    # This is a class attribute because there is only one master status LED
-    # on the platform. This attribute is shared among all objects inheriting
-    # from this class and can be read or set from any of them.
-    _psu_master_led_color = None
-
-    def __init__(self):
-        # List of FanBase-derived objects representing all fans
-        # available on the PSU
-        self._fan_list = []
-
-        # List of ThermalBase-derived objects representing all thermals
-        # available on the PSU
-        self._thermal_list = []
-
-        PsuBase._psu_master_led_color = self.STATUS_LED_COLOR_OFF
-
-    def get_num_fans(self):
-        """
-        Retrieves the number of fan modules available on this PSU
-
-        Returns:
-            An integer, the number of fan modules available on this PSU
-        """
-        return len(self._fan_list)
-
-    def get_all_fans(self):
-        """
-        Retrieves all fan modules available on this PSU
-
-        Returns:
-            A list of objects derived from FanBase representing all fan
-            modules available on this PSU
-        """
-        return self._fan_list
-
-    def get_fan(self, index):
-        """
-        Retrieves fan module represented by (0-based) index <index>
-
-        Args:
-            index: An integer, the index (0-based) of the fan module to
-            retrieve
-
-        Returns:
-            An object dervied from FanBase representing the specified fan
-            module
-        """
-        fan = None
-
-        try:
-            fan = self._fan_list[index]
-        except IndexError:
-            sys.stderr.write("Fan index {} out of range (0-{})\n".format(
-                             index, len(self._fan_list)-1))
-
-        return fan
-
-    def get_num_thermals(self):
-        """
-        Retrieves the number of thermals available on this PSU
-
-        Returns:
-            An integer, the number of thermals available on this PSU
-        """
-        return len(self._thermal_list)
-
-    def get_all_thermals(self):
-        """
-        Retrieves all thermals available on this PSU
-
-        Returns:
-            A list of objects derived from ThermalBase representing all thermals
-            available on this PSU
-        """
-        return self._thermal_list
-
-    def get_thermal(self, index):
-        """
-        Retrieves thermal unit represented by (0-based) index <index>
-
-        Args:
-            index: An integer, the index (0-based) of the thermal to
-            retrieve
-
-        Returns:
-            An object dervied from ThermalBase representing the specified thermal
-        """
-        thermal = None
-
-        try:
-            thermal = self._thermal_list[index]
-        except IndexError:
-            sys.stderr.write("THERMAL index {} out of range (0-{})\n".format(
-                             index, len(self._thermal_list)-1))
-
-        return thermal
-
-    def get_voltage(self):
-        """
-        Retrieves current PSU voltage output
-
-        Returns:
-            A float number, the output voltage in volts,
-            e.g. 12.1
-        """
-        raise NotImplementedError
-
-    def get_current(self):
-        """
-        Retrieves present electric current supplied by PSU
-
-        Returns:
-            A float number, the electric current in amperes, e.g 15.4
-        """
-        raise NotImplementedError
-
-    def get_power(self):
-        """
-        Retrieves current energy supplied by PSU
-
-        Returns:
-            A float number, the power in watts, e.g. 302.6
-        """
-        raise NotImplementedError
-
-    def get_powergood_status(self):
-        """
-        Retrieves the powergood status of PSU
-
-        Returns:
-            A boolean, True if PSU has stablized its output voltages and passed all
-            its internal self-tests, False if not.
-        """
-        raise NotImplementedError
-
-    def set_status_led(self, color):
-        """
-        Sets the state of the PSU status LED
-
-        Args:
-            color: A string representing the color with which to set the
-                   PSU status LED
-
-        Returns:
-            bool: True if status LED state is set successfully, False if not
-        """
-        raise NotImplementedError
-
-    def get_status_led(self):
-        """
-        Gets the state of the PSU status LED
-
-        Returns:
-            A string, one of the predefined STATUS_LED_COLOR_* strings above
-        """
-        raise NotImplementedError
-
-    def get_temperature(self):
-        """
-        Retrieves current temperature reading from PSU
-
-        Returns:
-            A float number of current temperature in Celsius up to nearest thousandth
-            of one degree Celsius, e.g. 30.125
-        """
-        raise NotImplementedError
-
-    def get_temperature_high_threshold(self):
-        """
-        Retrieves the high threshold temperature of PSU
-
-        Returns:
-            A float number, the high threshold temperature of PSU in Celsius
-            up to nearest thousandth of one degree Celsius, e.g. 30.125
-        """
-        raise NotImplementedError
-
-    def get_voltage_high_threshold(self):
-        """
-        Retrieves the high threshold PSU voltage output
-
-        Returns:
-            A float number, the high threshold output voltage in volts,
-            e.g. 12.1
-        """
-        raise NotImplementedError
-
-    def get_voltage_low_threshold(self):
-        """
-        Retrieves the low threshold PSU voltage output
-
-        Returns:
-            A float number, the low threshold output voltage in volts,
-            e.g. 12.1
-        """
-        raise NotImplementedError
-
-    def get_maximum_supplied_power(self):
-        """
-        Retrieves the maximum supplied power by PSU
-
-        Returns:
-            A float number, the maximum power output in Watts.
-            e.g. 1200.1
-        """
-        raise NotImplementedError
-
-    def get_psu_power_warning_suppress_threshold(self):
-        """
-        Retrieve the warning suppress threshold of the power on this PSU
-        The value can be volatile, so the caller should call the API each time it is used.
-
-        Returns:
-            A float number, the warning suppress threshold of the PSU in watts.
-        """
-        raise NotImplementedError
-
-    def get_psu_power_critical_threshold(self):
-        """
-        Retrieve the critical threshold of the power on this PSU
-        The value can be volatile, so the caller should call the API each time it is used.
-
-        Returns:
-            A float number, the critical threshold of the PSU in watts.
-        """
-        raise NotImplementedError
-
-    @classmethod
-    def get_status_master_led(cls):
-        """
-        Gets the state of the Master status LED for a given device-type
-
-        Returns:
-            A string, one of the predefined STATUS_LED_COLOR_* strings.
-        """
-        return cls._psu_master_led_color
-
-    @classmethod
-    def set_status_master_led(cls, color):
-        """
-        Gets the state of the Master status LED for a given device-type
-
-        Returns:
-            bool: True if status LED state is set successfully, False if
-                  not
-        """
-        cls._psu_master_led_color = color
-        return True
-
-    def get_input_voltage(self):
-        """
-        Retrieves current PSU voltage input
-
-        Returns:
-            A float number, the input voltage in volts,
-            e.g. 12.1
-        """
-        raise NotImplementedError
-
-    def get_input_current(self):
-        """
-        Retrieves the input current draw of the power supply
-
-        Returns:
-            A float number, the electric current in amperes, e.g 15.4
-        """
-        raise NotImplementedError
diff --git a/sonic_platform_base/thermal_base.py b/sonic_platform_base/thermal_base.py
deleted file mode 100644
index ee33524..0000000
--- a/sonic_platform_base/thermal_base.py
+++ /dev/null
@@ -1,139 +0,0 @@
-"""
-    thermal_base.py
-
-    Abstract base class for implementing a platform-specific class with which
-    to interact with a thermal module in SONiC
-"""
-
-from . import device_base
-
-
-class ThermalBase(device_base.DeviceBase):
-    """
-    Abstract base class for interfacing with a thermal module
-    """
-    # Device type definition. Note, this is a constant.
-    DEVICE_TYPE = "thermal"
-
-    def get_temperature(self):
-        """
-        Retrieves current temperature reading from thermal
-
-        Returns:
-            A float number of current temperature in Celsius up to nearest thousandth
-            of one degree Celsius, e.g. 30.125
-        """
-        raise NotImplementedError
-
-
-    def get_high_threshold(self):
-        """
-        Retrieves the high threshold temperature of thermal
-
-        Returns:
-            A float number, the high threshold temperature of thermal in Celsius
-            up to nearest thousandth of one degree Celsius, e.g. 30.125
-        """
-        raise NotImplementedError
-
-    def get_low_threshold(self):
-        """
-        Retrieves the low threshold temperature of thermal
-
-        Returns:
-            A float number, the low threshold temperature of thermal in Celsius
-            up to nearest thousandth of one degree Celsius, e.g. 30.125
-        """
-        raise NotImplementedError
-
-    def set_high_threshold(self, temperature):
-        """
-        Sets the high threshold temperature of thermal
-
-        Args :
-            temperature: A float number up to nearest thousandth of one degree Celsius,
-            e.g. 30.125
-
-        Returns:
-            A boolean, True if threshold is set successfully, False if not
-        """
-        raise NotImplementedError
-
-    def set_low_threshold(self, temperature):
-        """
-        Sets the low threshold temperature of thermal
-
-        Args :
-            temperature: A float number up to nearest thousandth of one degree Celsius,
-            e.g. 30.125
-
-        Returns:
-            A boolean, True if threshold is set successfully, False if not
-        """
-        raise NotImplementedError
-
-    def get_high_critical_threshold(self):
-        """
-        Retrieves the high critical threshold temperature of thermal
-
-        Returns:
-            A float number, the high critical threshold temperature of thermal in Celsius
-            up to nearest thousandth of one degree Celsius, e.g. 30.125
-        """
-        raise NotImplementedError
-
-    def get_low_critical_threshold(self):
-        """
-        Retrieves the low critical threshold temperature of thermal
-
-        Returns:
-            A float number, the low critical threshold temperature of thermal in Celsius
-            up to nearest thousandth of one degree Celsius, e.g. 30.125
-        """
-        raise NotImplementedError
-
-    def set_high_critical_threshold(self, temperature):
-        """
-        Sets the critical high threshold temperature of thermal
-
-        Args :
-            temperature: A float number up to nearest thousandth of one degree Celsius,
-            e.g. 30.125
-
-        Returns:
-            A boolean, True if threshold is set successfully, False if not
-        """
-        raise NotImplementedError
-
-    def set_low_critical_threshold(self, temperature):
-        """
-        Sets the critical low threshold temperature of thermal
-
-        Args :
-            temperature: A float number up to nearest thousandth of one degree Celsius,
-            e.g. 30.125
-
-        Returns:
-            A boolean, True if threshold is set successfully, False if not
-        """
-        raise NotImplementedError
-
-    def get_minimum_recorded(self):
-        """
-        Retrieves the minimum recorded temperature of thermal
-
-        Returns:
-            A float number, the minimum recorded temperature of thermal in Celsius
-            up to nearest thousandth of one degree Celsius, e.g. 30.125
-        """
-        raise NotImplementedError
-
-    def get_maximum_recorded(self):
-        """
-        Retrieves the maximum recorded temperature of thermal
-
-        Returns:
-            A float number, the maximum recorded temperature of thermal in Celsius
-            up to nearest thousandth of one degree Celsius, e.g. 30.125
-        """
-        raise NotImplementedError
diff --git a/sonic_platform_base/watchdog_base.py b/sonic_platform_base/watchdog_base.py
deleted file mode 100644
index 20ce7ab..0000000
--- a/sonic_platform_base/watchdog_base.py
+++ /dev/null
@@ -1,56 +0,0 @@
-"""
-    watchdog_base.py
-
-    Abstract base class for implementing a platform-specific class with which
-    to interact with a hardware watchdog module in SONiC
-"""
-
-
-class WatchdogBase:
-    """
-    Abstract base class for interfacing with a hardware watchdog module
-    """
-
-    def arm(self, seconds):
-        """
-        Arm the hardware watchdog with a timeout of <seconds> seconds.
-        If the watchdog is currently armed, calling this function will
-        simply reset the timer to the provided value. If the underlying
-        hardware does not support the value provided in <seconds>, this
-        method should arm the watchdog with the *next greater* available
-        value.
-
-        Returns:
-            An integer specifying the *actual* number of seconds the watchdog
-            was armed with. On failure returns -1.
-        """
-        raise NotImplementedError
-
-    def disarm(self):
-        """
-        Disarm the hardware watchdog
-
-        Returns:
-            A boolean, True if watchdog is disarmed successfully, False if not
-        """
-        raise NotImplementedError
-
-    def is_armed(self):
-        """
-        Retrieves the armed state of the hardware watchdog.
-
-        Returns:
-            A boolean, True if watchdog is armed, False if not
-        """
-        raise NotImplementedError
-
-    def get_remaining_time(self):
-        """
-        If the watchdog is armed, retrieve the number of seconds remaining on
-        the watchdog timer
-
-        Returns:
-            An integer specifying the number of seconds remaining on thei
-            watchdog timer. If the watchdog is not armed, returns -1.
-        """
-        raise NotImplementedError
-- 
2.25.1

