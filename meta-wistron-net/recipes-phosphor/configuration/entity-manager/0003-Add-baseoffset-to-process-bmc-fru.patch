From 75a515408265f15fb7f794736a297dce56e22085 Mon Sep 17 00:00:00 2001
From: jarvis_wc_chen <jarvis_wc_chen@wistron.com>
Date: Wed, 24 Aug 2022 12:26:41 +0800
Subject: [PATCH] Add baseoffset to process bmc fru

---
 include/fru_utils.hpp |  3 ++-
 src/fru_device.cpp    | 18 ++++++++++++++++--
 src/fru_utils.cpp     |  4 ++--
 3 files changed, 20 insertions(+), 5 deletions(-)

diff --git a/include/fru_utils.hpp b/include/fru_utils.hpp
index e50b580f..d8f28c44 100644
--- a/include/fru_utils.hpp
+++ b/include/fru_utils.hpp
@@ -146,7 +146,8 @@ bool findFRUHeader(FRUReader& reader, const std::string& errorHelp,
 /// \param errorHelp and a helper string for failures
 /// \return the FRU contents from the file
 std::vector<uint8_t> readFRUContents(FRUReader& reader,
-                                     const std::string& errorHelp);
+                                     const std::string& errorHelp,
+                                     off_t baseOffset);

 /// \brief Validate an IPMI FRU common header
 /// \param blockData the bytes comprising the common header
diff --git a/src/fru_device.cpp b/src/fru_device.cpp
index 31c58cdc..8348c070 100644
--- a/src/fru_device.cpp
+++ b/src/fru_device.cpp
@@ -286,13 +286,21 @@ static std::vector<uint8_t> processEeprom(int bus, int address)
         return {};
     }

+    int fruid = fruid_map[{(uint32_t)bus, (uint32_t)address}];
+    off_t baseOffset = 0;
+    if (fruid == FRU_BMC) {
+        lseek(file, 32, SEEK_SET);
+        baseOffset = 32;
+    }
+
     std::string errorMessage = "eeprom at " + std::to_string(bus) +
                                " address " + std::to_string(address);
     auto readFunc = [file](off_t offset, size_t length, uint8_t* outbuf) {
         return readFromEeprom(file, offset, length, outbuf);
     };
     FRUReader reader(std::move(readFunc));
-    std::vector<uint8_t> device = readFRUContents(reader, errorMessage);
+    std::vector<uint8_t> device = readFRUContents(reader, errorMessage,
+                                                  baseOffset);

     close(file);
     return device;
@@ -458,7 +466,8 @@ int getBusFRUs(int file, int first, int last, int bus,
             FRUReader reader(std::move(readFunc));
             std::string errorMessage =
                 "bus " + std::to_string(bus) + " address " + std::to_string(ii);
-            std::vector<uint8_t> device = readFRUContents(reader, errorMessage);
+            std::vector<uint8_t> device = readFRUContents(reader,
+                                                          errorMessage, 0);
             if (device.empty())
             {
                 continue;
@@ -860,6 +869,11 @@ bool writeFRU(uint8_t bus, uint8_t address, const std::vector<uint8_t>& fru)
             return false;
         }

+        int fruid = fruid_map[{bus, address}];
+        if (fruid == FRU_BMC) {
+            lseek(eeprom, 32, SEEK_SET);
+        }
+
         ssize_t writtenBytes = write(eeprom, fru.data(), fru.size());
         if (writtenBytes < 0)
         {
diff --git a/src/fru_utils.cpp b/src/fru_utils.cpp
index bc59af8f..41a5f9de 100644
--- a/src/fru_utils.cpp
+++ b/src/fru_utils.cpp
@@ -635,10 +635,10 @@ bool findFRUHeader(FRUReader& reader, const std::string& errorHelp,
 }

 std::vector<uint8_t> readFRUContents(FRUReader& reader,
-                                     const std::string& errorHelp)
+                                     const std::string& errorHelp,
+                                     off_t baseOffset)
 {
     std::array<uint8_t, I2C_SMBUS_BLOCK_MAX> blockData{};
-    off_t baseOffset = 0x0;

     if (!findFRUHeader(reader, errorHelp, blockData, baseOffset))
     {
--
2.25.1

