From b0697a81e1213708228bf9a820ec021880702592 Mon Sep 17 00:00:00 2001
From: Neal_Chen <neal_chen@wistron.com>
Date: Thu, 18 Aug 2022 02:28:02 +0000
Subject: [PATCH] Set MAC into eeprom

---
 transporthandler.cpp | 39 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/transporthandler.cpp b/transporthandler.cpp
index ba4e4b0f..c8c72e19 100644
--- a/transporthandler.cpp
+++ b/transporthandler.cpp
@@ -10,6 +10,8 @@ using sdbusplus::xyz::openbmc_project::Network::server::EthernetInterface;
 using sdbusplus::xyz::openbmc_project::Network::server::IP;
 using sdbusplus::xyz::openbmc_project::Network::server::Neighbor;
 
+#define BMC_PATH "/sys/bus/i2c/devices/8-0051/eeprom"
+
 namespace cipher
 {
 
@@ -305,6 +307,18 @@ void setMACProperty(sdbusplus::bus_t& bus, const ChannelParams& params,
                     macStr);
 }
 
+/** @brief Sets the system value for MAC volatile attribute.
+ *
+ *  @param[in] bus        - The bus object used for lookups
+ *  @param[in] params     - The parameters for the channel
+ */
+bool getMACVolatileProperty(sdbusplus::bus::bus& bus, const ChannelParams& params)
+{
+    auto macNonVolatile = std::get<bool>(getDbusProperty(
+        bus, params.service, params.ifPath, INTF_MAC, "MacNonVolatile"));
+    return macNonVolatile;
+}
+
 void deleteObjectIfExists(sdbusplus::bus_t& bus, const std::string& service,
                           const std::string& path)
 {
@@ -811,6 +825,23 @@ RspType<message::Payload> getLanOem(uint8_t, uint8_t, uint8_t, uint8_t)
 {
     return response(ccParamNotSupported);
 }
+
+int writeMacToEeprom(ether_addr mac)
+{
+    auto fp = open(BMC_PATH, O_RDWR);
+    lseek(fp, 16, SEEK_SET);
+    ssize_t writtenBytes = write(fp, mac.ether_addr_octet, sizeof(mac.ether_addr_octet));
+    if (writtenBytes < 0)
+    {
+        log<level::ERR>("writeMacToEeprom: unable to write to i2c device");
+        close(fp);
+        return -1;
+    }
+
+    close(fp);
+    return 0;
+}
+
 /**
  * @brief is MAC address valid.
  *
@@ -971,6 +1002,14 @@ RspType<> setLan(Context::ptr ctx, uint4_t channelBits, uint4_t reserved1,
             {
                 return responseInvalidFieldRequest();
             }
+
+            auto isNonVolatile = channelCall<getMACVolatileProperty>(channel);
+            if (isNonVolatile) {
+                auto ret = writeMacToEeprom(mac);
+                if (ret)
+                    return responseUnspecifiedError();
+            }
+
             channelCall<setMACProperty>(channel, mac);
             return responseSuccess();
         }
-- 
2.25.1

